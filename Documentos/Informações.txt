Resolução do desafio
1 - Adicionando restrições em Restaurante
Primeiro, vamos adicionar restrições para não permitir valores nulos nos atributos de restaurante

    @Column(nullable = false)
	private String nome;
	
	@Column(name = "taxa_frete", nullable = false)
	private BigDecimal taxaFrete;
	
	@ManyToOne
	@JoinColumn(name = "cozinha_id", nullable = false)
	private Cozinha cozinha;
    
2 - Criando as entidades
Nessa etapa, iremos seguir o diagrama e criar nossas entidades baseadas nele.

Assim como fizemos anteriormente, adicionaremos as anotações do JPA e do Lombok

Estado
    @Data
    @EqualsAndHashCode(onlyExplicitlyIncluded = true)
    @Entity
    public class Estado {

        @EqualsAndHashCode.Include
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;
        
        @Column(nullable = false)
        private String nome;
        
    }
    
Cidade
    
    @Data
    @EqualsAndHashCode(onlyExplicitlyIncluded = true)
    @Entity
    public class Cidade {

        @EqualsAndHashCode.Include
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;
        
        @Column(nullable = false)
        private String nome;
        
        @ManyToOne
        @JoinColumn(nullable = false)
        private Estado estado;
    }
    
FormaPagamento
    @Data
    @EqualsAndHashCode(onlyExplicitlyIncluded = true)
    @Entity
    public class FormaPagamento {

        @EqualsAndHashCode.Include
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;
        
        @Column(nullable = false)
        private String descricao;        
    }
    
Permissao
    @Data
    @EqualsAndHashCode(onlyExplicitlyIncluded = true)
    @Entity
    public class Permissao {

        @EqualsAndHashCode.Include
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;
        
        @Column(nullable = false)
        private String nome;
        
        @Column(nullable = false)
        private String descricao;
        
    }
    
3 - Criando as interfaces dos repositórios
Agora, vamos criar as interfaces dos repositórios

Utilizaremos os mesmos métodos, como feito anteriormente

EstadoRepository
    public interface EstadoRepository {

        List<Estado> listar();
        Estado buscar(Long id);
        Estado salvar(Estado estado);
        void remover(Estado estado);
        
    }
    
CidadeRepository
    public interface CidadeRepository {

        List<Cidade> listar();
        Cidade buscar(Long id);
        Cidade salvar(Cidade cidade);
        void remover(Cidade cidade);
        
    }    
    
FormaPagamentoRepository
    public interface FormaPagamentoRepository {

        List<FormaPagamento> listar();
        FormaPagamento buscar(Long id);
        FormaPagamento salvar(FormaPagamento formaPagamento);
        void remover(FormaPagamento formaPagamento);
        
    }    
    
PermissaoRepository
    public interface PermissaoRepository {

        List<Permissao> listar();
        Permissao buscar(Long id);
        Permissao salvar(Permissao permissao);
        void remover(Permissao permissao);
        
    }
    
4 - Implementando os repositórios
Chegou a hora de implementarmos as interfaces que acabamos de criar

EstadoRepositoryImpl
    @Component
    public class EstadoRepositoryImpl implements EstadoRepository {

        @PersistenceContext
        private EntityManager manager;
        
        @Override
        public List<Estado> listar() {
            return manager.createQuery("from Estado", Estado.class)
                    .getResultList();
        }
        
        @Override
        public Estado buscar(Long id) {
            return manager.find(Estado.class, id);
        }
        
        @Transactional
        @Override
        public Estado salvar(Estado estado) {
            return manager.merge(estado);
        }
        
        @Transactional
        @Override
        public void remover(Estado estado) {
            estado = buscar(estado.getId());
            manager.remove(estado);
        }

    }
    
CidadeRepositoryImpl
    @Component
    public class CidadeRepositoryImpl implements CidadeRepository {

        @PersistenceContext
        private EntityManager manager;
        
        @Override
        public List<Cidade> listar() {
            return manager.createQuery("from Cidade", Cidade.class)
                    .getResultList();
        }
        
        @Override
        public Cidade buscar(Long id) {
            return manager.find(Cidade.class, id);
        }
        
        @Transactional
        @Override
        public Cidade salvar(Cidade cidade) {
            return manager.merge(cidade);
        }
        
        @Transactional
        @Override
        public void remover(Cidade cidade) {
            cidade = buscar(cidade.getId());
            manager.remove(cidade);
        }
    }
    
FormaPagamentoRepositoryImpl
    @Component
    public class FormaPagamentoRepositoryImpl implements FormaPagamentoRepository {

        @PersistenceContext
        private EntityManager manager;
        
        @Override
        public List<FormaPagamento> listar() {
            return manager.createQuery("from FormaPagamento", FormaPagamento.class)
                    .getResultList();
        }
        
        @Override
        public FormaPagamento buscar(Long id) {
            return manager.find(FormaPagamento.class, id);
        }
        
        @Transactional
        @Override
        public FormaPagamento salvar(FormaPagamento formaPagamento) {
            return manager.merge(formaPagamento);
        }
        
        @Transactional
        @Override
        public void remover(FormaPagamento formaPagamento) {
            formaPagamento = buscar(formaPagamento.getId());
            manager.remove(formaPagamento);
        }

    }
    
PermissaoRepositoryImpl
    @Component
    public class PermissaoRepositoryImpl implements PermissaoRepository {

        @PersistenceContext
        private EntityManager manager;
        
        @Override
        public List<Permissao> listar() {
            return manager.createQuery("from Permissao", Permissao.class)
                    .getResultList();
        }
        
        @Override
        public Permissao buscar(Long id) {
            return manager.find(Permissao.class, id);
        }
        
        @Transactional
        @Override
        public Permissao salvar(Permissao permissao) {
            return manager.merge(permissao);
        }
        
        @Transactional
        @Override
        public void remover(Permissao permissao) {
            permissao = buscar(permissao.getId());
            manager.remove(permissao);
        }
    }
    
5 - Criando as classes para testarmos
Chegou a hora de validarmos se tudo correu bem, pra isso criaremos as seguintes classes

ConsultaCidadeMain
    public class ConsultaCidadeMain {

        public static void main(String[] args) {
            ApplicationContext applicationContext = new SpringApplicationBuilder(AlgafoodApiApplication.class)
                    .web(WebApplicationType.NONE)
                    .run(args);
            
            CidadeRepository cidadeRepository = applicationContext.getBean(CidadeRepository.class);
            
            List<Cidade> todasCidades = cidadeRepository.listar();
            
            for (Cidade cidade : todasCidades) {
                System.out.printf("%s - %s\n", cidade.getNome(), cidade.getEstado().getNome());
            }
        }
        
    }
    
ConsultaFormaPagamentoMain
    public class ConsultaFormaPagamentoMain {

        public static void main(String[] args) {
            ApplicationContext applicationContext = new SpringApplicationBuilder(AlgafoodApiApplication.class)
                    .web(WebApplicationType.NONE)
                    .run(args);
            
            FormaPagamentoRepository formaPagamentoRepository = applicationContext.getBean(FormaPagamentoRepository.class);
            
            List<FormaPagamento> todasFormasPagamentos = formaPagamentoRepository.listar();
            
            for (FormaPagamento formaPagamento : todasFormasPagamentos) {
                System.out.println(formaPagamento.getDescricao());
            }
        }
        
    }
    
ConsultaPermissaoMain
    public class ConsultaPermissaoMain {

        public static void main(String[] args) {
            ApplicationContext applicationContext = new SpringApplicationBuilder(AlgafoodApiApplication.class)
                    .web(WebApplicationType.NONE)
                    .run(args);
            
            PermissaoRepository permissaoRepository = applicationContext.getBean(PermissaoRepository.class);
            
            List<Permissao> todasPermissoes = permissaoRepository.listar();
            
            for (Permissao permissao : todasPermissoes) {
                System.out.printf("%s - %s\n", permissao.getNome(), permissao.getDescricao());
            }
        }
        
    }
    
6 - Adicionando dados de restaurantes
Aqui, iremos alterar o arquivo import.sql e adicionaremos comandos insert para popularmos as tabelas referentes as nossas novas entidades.

Mas primeiro, iremos forçar os IDs dos restaurantes para usarmos nos relacionamentos

    insert into restaurante (id, nome, taxa_frete, cozinha_id) values (1, 'Thai Gourmet', 10, 1);
    insert into restaurante (id, nome, taxa_frete, cozinha_id) values (2, 'Thai Delivery', 9.50, 1);
    insert into restaurante (id, nome, taxa_frete, cozinha_id) values (3, 'Tuk Tuk Comida Indiana', 15, 2);    
    
Com esses IDs podemos, continuar a popular nossas tabelas

    insert into estado (id, nome) values (1, 'Minas Gerais');
    insert into estado (id, nome) values (2, 'São Paulo');
    insert into estado (id, nome) values (3, 'Ceará');

    insert into cidade (id, nome, estado_id) values (1, 'Uberlândia', 1);
    insert into cidade (id, nome, estado_id) values (2, 'Belo Horizonte', 1);
    insert into cidade (id, nome, estado_id) values (3, 'São Paulo', 2);
    insert into cidade (id, nome, estado_id) values (4, 'Campinas', 2);
    insert into cidade (id, nome, estado_id) values (5, 'Fortaleza', 3);

    insert into forma_pagamento (id, descricao) values (1, 'Cartão de crédito');
    insert into forma_pagamento (id, descricao) values (2, 'Cartão de débito');
    insert into forma_pagamento (id, descricao) values (3, 'Dinheiro');

    insert into permissao (id, nome, descricao) values (1, 'CONSULTAR_COZINHAS', 'Permite consultar cozinhas');
    insert into permissao (id, nome, descricao) values (2, 'EDITAR_COZINHAS', 'Permite editar cozinhas');
    